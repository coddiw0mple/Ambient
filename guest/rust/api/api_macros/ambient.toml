# The following file is auto-generated. Please do not change this file.
[project]
id = "runtime_components"
name = "Runtime Components"
version = "0.1.1"

[components.core]
name = "Core"
description = "Contains all core components for the Ambient Runtime."

[components."core::app"]
name = "App"
description = "High-level state relevant to the application (including the in-development Editor)."

[components."core::camera"]
name = "Camera"
description = "Camera matrices, types, parameters, and more."

[components."core::ecs"]
name = "Entity Component System"
description = "Core components for the ECS and entities."

[components."core::game_objects"]
name = "Game Objects"
description = "Pre-defined game objects that implement specific behaviours."

[components."core::model"]
name = "Model"
description = "Information about models attached to entities."

[components."core::network"]
name = "Network"
description = "Network-related state."

[components."core::prefab"]
name = "Prefab"
description = "Prefab-related state, including loading of prefabs."

[components."core::physics"]
name = "Physics"
description = "Physics functionality and state."

[components."core::input"]
name = "Input"
description = "Mouse, keyboard and controller input."

[components."core::player"]
name = "Player"
description = "Components that are attached to player entities."

[components."core::primitives"]
name = "Primitives"
description = "Components that create primitive (in the geometric sense) objects from their attached entities."

[components."core::rendering"]
name = "Rendering"
description = "Rendering-related state, including global rendering parameters and per-entity state."

[components."core::transform"]
name = "Transform"
description = "Entity transform state (including translation, rotation and scale), as well as other transformations for this entity."

[components."core::ui"]
name = "UI"
description = "Anything related to UI and text."

[components."core::app::dtime"]
type = "F32"
name = "Delta Time"
description = """
How long the previous tick took in seconds.
Also known as frametime."""
attributes = ["Debuggable", "Resource"]

[components."core::app::element"]
type = "String"
name = "Element"
description = "The id of the Element which controls this Entity."
attributes = ["Debuggable", "Networked"]

[components."core::app::element_unmanaged_children"]
type = "Empty"
name = "Element unmanaged children"
description = "If this is set, the user is expected to manage the children of the element themselves."
attributes = ["Debuggable", "Networked"]

[components."core::app::main_scene"]
type = "Empty"
name = "Main scene"
description = "If attached, this entity belongs to the main scene."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::app::map_seed"]
type = "U64"
name = "Map seed"
description = "A random number seed for this map."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::app::name"]
type = "String"
name = "Name"
description = "A human-friendly name for this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::app::project_name"]
type = "String"
name = "Project Name"
description = """
The name of the project, from the manifest.
Defaults to \"Ambient\"."""
attributes = ["Debuggable", "Resource"]

[components."core::app::selectable"]
type = "Empty"
name = "Selectable"
description = "If attached, this object can be selected in the editor."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::app::snap_to_ground"]
type = "F32"
name = "Snap to ground"
description = """
This object should automatically be moved with the terrain if the terrain is changed.
The value is the offset from the terrain."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::app::tags"]
type = { type = "Vec", element_type = "String" }
name = "Tags"
description = "Tags for categorizing this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::app::ui_scene"]
type = "Empty"
name = "UI scene"
description = "If attached, this entity belongs to the UI scene."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::app::window_logical_size"]
type = "Uvec2"
name = "Window logical size"
description = "The logical size is the physical size divided by the scale factor."
attributes = ["Debuggable", "Networked"]

[components."core::app::window_physical_size"]
type = "Uvec2"
name = "Window physical size"
description = "The physical size is the actual number of pixels on the screen."
attributes = ["Debuggable", "Networked"]

[components."core::app::window_scale_factor"]
type = "F64"
name = "Window scale factor"
description = "This number is usually 1, but on for instance retina displays it's 2."
attributes = ["Debuggable", "Networked"]

[components."core::camera::active_camera"]
type = "F32"
name = "Active camera"
description = """
The camera with the highest `active_camera` value will be used for rendering. Cameras are also filtered by the `user_id`.
        If there's no `user_id`, the camera is considered global and potentially applies to all users (if its active_camera value is high enough)"""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::aspect_ratio"]
type = "F32"
name = "Aspect ratio"
description = """
The aspect ratio of this camera.
If `aspect_ratio_from_window` is set, this will be automatically updated to match the window."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::aspect_ratio_from_window"]
type = "EntityId"
name = "Aspect ratio from window"
description = "If attached, the `aspect_ratio` component will be automatically updated to match the aspect ratio of the window. Should point to an entity with a `window_physical_size` component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::far"]
type = "F32"
name = "Far plane"
description = "The far plane of this camera, measured in meters."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::fog"]
type = "Empty"
name = "Fog"
description = "If attached, this camera will see/render fog."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::fovy"]
type = "F32"
name = "Field of View Y"
description = "The field of view of this camera in the Y/vertical direction, measured in radians."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::near"]
type = "F32"
name = "Near plane"
description = "The near plane of this camera, measured in meters."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::orthographic"]
type = "Empty"
name = "Orthographic projection"
description = """
If attached, this camera will use a standard orthographic projection matrix.
Ensure that the `orthographic_` components are set, including `left`, right`, `top` and `bottom`, as well as `near` and `far`."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::orthographic_bottom"]
type = "F32"
name = "Orthographic bottom"
description = "The bottom bound for this `orthographic` camera."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::orthographic_from_window"]
type = "EntityId"
name = "Orthographic from window"
description = "The bounds of this orthographic camera will be updated to match the window automatically. Should point to an entity with a `window_logical_size` component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::orthographic_left"]
type = "F32"
name = "Orthographic left"
description = "The left bound for this `orthographic` camera."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::orthographic_right"]
type = "F32"
name = "Orthographic right"
description = "The right bound for this `orthographic` camera."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::orthographic_top"]
type = "F32"
name = "Orthographic top"
description = "The top bound for this `orthographic` camera."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::perspective"]
type = "Empty"
name = "Perspective projection"
description = """
If attached, this camera will use a standard perspective projection matrix.
Ensure that `near` and `far` are set."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::perspective_infinite_reverse"]
type = "Empty"
name = "Perspective-infinite-reverse projection"
description = """
If attached, this camera will use a perspective-infinite-reverse projection matrix.
This is well-suited for rendering large worlds as it has no far plane. Ensure `near` is set."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::projection"]
type = "Mat4"
name = "Projection"
description = """
The projection matrix of this camera.
This can be driven by other components, including `perspective` and `perspective_infinite_reverse`."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::projection_view"]
type = "Mat4"
name = "Projection-view"
description = "The composition of the projection and view (inverse-local-to-world) matrices."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::camera::shadows_far"]
type = "F32"
name = "Shadows far plane"
description = "The far plane for the shadow camera, measured in meters."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ecs::children"]
type = { type = "Vec", element_type = "EntityId" }
name = "Children"
description = "The children of this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ecs::dont_despawn_on_unload"]
type = "Empty"
name = "Don't automatically despawn on module unload"
description = "Indicates that this entity shouldn't be despawned when the module that spawned it unloads."
attributes = ["Debuggable", "Store"]

[components."core::ecs::dont_store"]
type = "Empty"
name = "Don't store"
description = "Indicates that this entity shouldn't be stored on disk."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ecs::id"]
type = "EntityId"
name = "ID"
description = "The ID of the entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ecs::ids"]
type = { type = "Vec", element_type = "EntityId" }
name = "IDs"
description = "A generic list of entity IDs, with no semantic meaning."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ecs::parent"]
type = "EntityId"
name = "Parent"
description = "The parent of this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::input::event_mouse_input"]
type = "Bool"
name = "Event mouse input"
description = "A mouse button was pressed (true) or released (false). Will also contain a `mouse_button` component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::input::event_mouse_motion"]
type = "Vec2"
name = "Event mouse motion"
description = "The mouse was moved. The value represents the delta. Use mouse_position to get the current position."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::input::event_mouse_wheel"]
type = "Vec2"
name = "Event mouse wheel"
description = "The mouse wheel moved. The value represents the delta."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::input::event_mouse_wheel_pixels"]
type = "Bool"
name = "Event mouse wheel"
description = "If true, the mouse_wheel_event should be interpreted as pixels, if false it should be interpreted as lines."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::input::mouse_button"]
type = "U32"
name = "Mouse button"
description = "The mouse button. 0=left, 1=right, 2=middle."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::input::mouse_over"]
type = "U32"
name = "Mouse over"
description = "The number of mouse cursors that are currently over this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::input::mouse_pickable_max"]
type = "Vec3"
name = "Mouse pickable max"
description = "This entity can be clicked by the mouse, and this component defines the max AABB bound of the click area."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::input::mouse_pickable_min"]
type = "Vec3"
name = "Mouse pickable min"
description = "This entity can be clicked by the mouse, and this component defines the min AABB bound of the click area."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::model::model_animatable"]
type = "Bool"
name = "Model animatable"
description = "Controls whether this model can be animated."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::model::model_from_url"]
type = "String"
name = "Model from URL"
description = "Load a model from the given URL or relative path."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::model::model_loaded"]
type = "Empty"
name = "Model loaded"
description = "If attached, this entity has a model attached to it."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::network::is_remote_entity"]
type = "Empty"
name = "Is remote entity"
description = "If attached, this entity was not spawned locally (e.g. if this is the client, it was spawned by the server)."
attributes = ["Debuggable", "Networked"]

[components."core::network::persistent_resources"]
type = "Empty"
name = "Persistent resources"
description = "If attached, this entity contains global resources that are persisted to disk and synchronized to clients."
attributes = ["Debuggable", "Networked"]

[components."core::network::synced_resources"]
type = "Empty"
name = "Synced resources"
description = "If attached, this entity contains global resources that are synchronized to clients, but not persisted."
attributes = ["Debuggable", "Networked"]

[components."core::physics::angular_velocity"]
type = "Vec3"
name = "Angular velocity"
description = """
Angular velocity (radians/second) of this entity in the physics scene.
Updating this component will update the entity's angular velocity in the physics scene."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::box_collider"]
type = "Vec3"
name = "Box collider"
description = """
If attached, this entity will have a box physics collider.
`x, y, z` is the size of the box."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::character_controller_height"]
type = "F32"
name = "Character controller height"
description = """
The height of the physics character controller attached to this entity.
If an entity has both this and a `character_controller_radius`, it will be given a physical character collider."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::character_controller_radius"]
type = "F32"
name = "Character controller radius"
description = """
The radius of the physics character controller attached to this entity.
If an entity has both this and a `character_controller_height`, it will be given a physical character collider."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::collider_from_url"]
type = "String"
name = "Collider from URL"
description = """
This entity will load its physics collider from the URL.
The value is the URL to load from."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::collider_loads"]
type = { type = "Vec", element_type = "EntityId" }
name = "Collider loads"
description = "Contains all colliders that were loaded in this physics tick."
attributes = ["Debuggable", "Networked", "Resource", "Store"]

[components."core::physics::contact_offset"]
type = "F32"
name = "Contact offset"
description = """
Contact offset (in meters) of this entity in the physics scene.
Updating this component will update the entity's contact offset for each attached shape in the physics scene."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::density"]
type = "F32"
name = "Density"
description = """
The density of this entity.
This is used to update the `mass` when the entity is rescaled."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::dynamic"]
type = "Bool"
name = "Dynamic"
description = "If this is true, the entity will be dynamic (i.e. be able to move). Otherwise, it will be static."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::kinematic"]
type = "Empty"
name = "Kinematic"
description = "If attached, and this entity is dynamic, this entity will also be kinematic (i.e. unable to be affected by other entities motion). Otherwise, it will receive forces normally."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::linear_velocity"]
type = "Vec3"
name = "Linear velocity"
description = """
Linear velocity (meters/second) of this entity in the physics scene.
Updating this component will update the entity's linear velocity in the physics scene."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::make_physics_static"]
type = "Bool"
name = "Make physics static"
description = "All physics objects will be made static when loaded."
attributes = ["Debuggable", "Networked", "Resource", "Store"]

[components."core::physics::mass"]
type = "F32"
name = "Mass"
description = "The mass of this entity, measured in kilograms."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::physics_controlled"]
type = "Empty"
name = "Physics controlled"
description = """
If attached, this entity will be controlled by physics.
Note that this requires the entity to have a collider."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::plane_collider"]
type = "Empty"
name = "Plane collider"
description = "If attached, this entity will have a plane physics collider."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::rest_offset"]
type = "F32"
name = "Rest offset"
description = """
Rest offset (in meters) of this entity in the physics scene.
Updating this component will update the entity's rest offset for each attached shape in the physics scene."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::sphere_collider"]
type = "F32"
name = "Sphere collider"
description = """
If attached, this entity will have a sphere physics collider.
The value corresponds to the radius of the sphere."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::unit_mass"]
type = "F32"
name = "Unit mass"
description = "The mass of a character/unit."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::unit_velocity"]
type = "Vec3"
name = "Unit velocity"
description = "The velocity of a character/unit."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::unit_yaw"]
type = "F32"
name = "Unit yaw"
description = "The yaw of a character/unit."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::physics::visualizing"]
type = "Empty"
name = "Visualizing"
description = "If attached, the physics state of this object will be rendered for debugging purposes."
attributes = ["Networked"]

[components."core::player::local_user_id"]
type = "String"
name = "Local user ID"
description = "The user ID of the local player."
attributes = ["Networked", "Resource", "Store"]

[components."core::player::player"]
type = "Empty"
name = "Player"
description = """
This entity is a player.
Note that this is a logical construct; a player's body may be separate from the player itself."""
attributes = ["Networked", "Store"]

[components."core::player::user_id"]
type = "String"
name = "User ID"
description = """
An identifier attached to all things owned by a user, and supplied by the user.
This can be attached to more than just the player; by convention, it is also attached to related entities, including their camera and body."""
attributes = ["Networked", "Store"]

[components."core::prefab::prefab_from_url"]
type = "String"
name = "Prefab from URL"
description = """
Load and attach a prefab from a URL or relative path.
When loaded, the components from this prefab will add to or replace the existing components for the entity."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::prefab::spawned"]
type = "Empty"
name = "Spawned"
description = "If attached, this entity was built from a prefab that has finished spawning."
attributes = ["Debuggable"]

[components."core::primitives::cube"]
type = "Empty"
name = "Cube"
description = """
If attached to an entity, the entity will be converted to a cube primitive.
The cube is unit-sized (i.e. 0.5 metres out to each side)."""
attributes = ["Networked", "Store"]

[components."core::primitives::quad"]
type = "Empty"
name = "Quad"
description = """
If attached to an entity, the entity will be converted to a quad primitive.
The quad is unit-sized on the XY axes, and flat on the Z axis (i.e. 0.5 metres out to the XY axes)."""
attributes = ["Networked", "Store"]

[components."core::primitives::sphere"]
type = "Empty"
name = "Sphere"
description = """
If attached to an entity, the entity will be converted to a unit-diameter sphere primitive.
The sphere can be customized using the `sphere_radius`, `sphere_sectors` and `sphere_stacks` components."""
attributes = ["Networked", "Store"]

[components."core::primitives::sphere_radius"]
type = "F32"
name = "Sphere radius"
description = "Set the radius of a `sphere` entity."
default = 0.5
attributes = ["Networked", "Store"]

[components."core::primitives::sphere_sectors"]
type = "U32"
name = "Sphere sectors"
description = "Set the longitudinal sectors of a `sphere` entity."
default = 36
attributes = ["Networked", "Store"]

[components."core::primitives::sphere_stacks"]
type = "U32"
name = "Sphere stacks"
description = "Set the latitudinal stacks of a `sphere` entity."
default = 18
attributes = ["Networked", "Store"]

[components."core::rendering::cast_shadows"]
type = "Empty"
name = "Cast shadows"
description = "If attached, this entity will cast shadows."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::color"]
type = "Vec4"
name = "Color"
description = "This entity will be tinted with the specified color if the color is not black."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::double_sided"]
type = "Bool"
name = "Double-sided"
description = "If this is set, the entity will be rendered with double-sided rendering."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::fog_color"]
type = "Vec3"
name = "Fog color"
description = "The color of the fog for this `sun`."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::fog_density"]
type = "F32"
name = "Fog density"
description = "The density of the fog for this `sun`."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::fog_height_falloff"]
type = "F32"
name = "Fog height fall-off"
description = "The height at which the fog will fall off (i.e. stop being visible) for this `sun`."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::joint_matrices"]
type = { type = "Vec", element_type = "Mat4" }
name = "Joint Matrices"
description = """
Contains the matrices for each joint of this skinned mesh.
This should be used in combination with `joints`."""
attributes = ["Networked", "Store"]

[components."core::rendering::joints"]
type = { type = "Vec", element_type = "EntityId" }
name = "Joints"
description = "Contains the joints that comprise this skinned mesh."
attributes = ["Networked", "Store"]

[components."core::rendering::light_ambient"]
type = "Vec3"
name = "Light ambient"
description = "The ambient light color of the `sun`."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::light_diffuse"]
type = "Vec3"
name = "Light diffuse"
description = "The diffuse light color of the `sun`."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::outline"]
type = "Vec4"
name = "Outline"
description = "If attached, this entity will be rendered with an outline with the color specified."
attributes = ["Networked", "Store"]

[components."core::rendering::outline_recursive"]
type = "Vec4"
name = "Outline (recursive)"
description = """
If attached, this entity and all of its children will be rendered with an outline with the color specified.
You do not need to attach `outline` if you have attached `outline_recursive`."""
attributes = ["Networked", "Store"]

[components."core::rendering::overlay"]
type = "Empty"
name = "Overlay"
description = "If attached, this entity will be rendered with an overlay."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::pbr_material_from_url"]
type = "String"
name = "Pbr material from url"
description = "Load a pbr material from the url and attach it to this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::sky"]
type = "Empty"
name = "Sky"
description = "Add a realistic sky box to the scene."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::sun"]
type = "F32"
name = "Sun"
description = """
Marks this entity as a sun (i.e. its rotation will be used to control the global light direction).
The entity with the highest `sun` value takes precedence."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::transparency_group"]
type = "I32"
name = "Transparency group"
description = "Controls when this transparent object will be rendered. Transparent objects are sorted by (transparency_group, z-depth)."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::rendering::water"]
type = "Empty"
name = "Water"
description = "Add a realistic water plane to this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::cylindrical_billboard_z"]
type = "Empty"
name = "Cylindrical billboard Z"
description = """
If attached, this ensures this entity is always aligned with the camera, except on the Z-axis.
This is useful for decorations that the player will be looking at from roughly the same altitude."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::euler_rotation"]
type = "Vec3"
name = "Euler rotation"
description = "The Euler rotation of this entity in ZYX order."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::inv_local_to_world"]
type = "Mat4"
name = "Inverse Local to World"
description = """
Converts a world position to a local position.
This is automatically updated."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::local_to_parent"]
type = "Mat4"
name = "Local to Parent"
description = "Transformation from the entity's local space to the parent's space."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::local_to_world"]
type = "Mat4"
name = "Local to World"
description = "Transformation from the entity's local space to worldspace."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::lookat_center"]
type = "Vec3"
name = "Look-at center"
description = "The position that this entity should be looking at."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::lookat_up"]
type = "Vec3"
name = "Look-at up"
description = "When combined with `lookat_center`, the up vector for this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::mesh_to_local"]
type = "Mat4"
name = "Mesh to Local"
description = "Transformation from mesh-space to the entity's local space."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::mesh_to_world"]
type = "Mat4"
name = "Mesh to World"
description = """
Transformation from mesh-space to world space.
This is automatically updated when `mesh_to_local` and `local_to_world` change."""
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::reset_scale"]
type = "Empty"
name = "Reset scale"
description = "If attached to a transform hierarchy, the scale will be reset at that point, with only rotation/translation considered."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::rotation"]
type = "Quat"
name = "Rotation"
description = "The rotation of this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::scale"]
type = "Vec3"
name = "Scale"
description = "The scale of this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::spherical_billboard"]
type = "Empty"
name = "Spherical billboard"
description = "If attached, this ensures that this entity is always aligned with the camera."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::transform::translation"]
type = "Vec3"
name = "Translation"
description = "The translation/position of this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::align_horizontal_begin"]
type = "Empty"
name = "Align horizontal begin"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::align_horizontal_center"]
type = "Empty"
name = "Align horizontal center"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::align_horizontal_end"]
type = "Empty"
name = "Align horizontal end"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::align_vertical_begin"]
type = "Empty"
name = "Align vertical begin"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::align_vertical_center"]
type = "Empty"
name = "Align vertical center"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::align_vertical_end"]
type = "Empty"
name = "Align vertical end"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::background_color"]
type = "Vec4"
name = "Background color"
description = "Background color of a rect() entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::border_color"]
type = "Vec4"
name = "Border color"
description = "Border color of a rect() entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::border_radius"]
type = "Vec4"
name = "Border radius"
description = "x = top left, y = top right, z = bottom left, w = bottom right."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::border_thickness"]
type = "F32"
name = "Border thickness"
description = "Border thickness of a rect() entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::docking_bottom"]
type = "Empty"
name = "Docking bottom"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::docking_fill"]
type = "Empty"
name = "Docking fill"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::docking_left"]
type = "Empty"
name = "Docking left"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::docking_right"]
type = "Empty"
name = "Docking right"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::docking_top"]
type = "Empty"
name = "Docking top"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::fit_horizontal_children"]
type = "Empty"
name = "Fit horizontal children"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::fit_horizontal_none"]
type = "Empty"
name = "Fit horizontal none"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::fit_horizontal_parent"]
type = "Empty"
name = "Fit horizontal parent"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::fit_vertical_children"]
type = "Empty"
name = "Fit vertical children"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::fit_vertical_none"]
type = "Empty"
name = "Fit vertical none"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::fit_vertical_parent"]
type = "Empty"
name = "Fit vertical parent"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::font_size"]
type = "F32"
name = "Font size"
description = "Size of the font."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::gpu_ui_size"]
type = "Vec4"
name = "Gpu ui size"
description = "Upload the width and height of this to the gpu."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::height"]
type = "F32"
name = "Height"
description = "The height of a UI element."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::is_book_file"]
type = "Empty"
name = "Is book file"
description = "This is a file in a layout_bookcase."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::layout_bookcase"]
type = "Empty"
name = "Bookcase layout"
description = "Min-max bookcase layout."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::layout_dock"]
type = "Empty"
name = "Dock layout"
description = "Top-down dock layout."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::layout_flow"]
type = "Empty"
name = "Flow layout"
description = "Bottom-up flow layout."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::layout_width_to_children"]
type = "Empty"
name = "Layout width to children"
description = "Width to children."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::margin_bottom"]
type = "F32"
name = "Margin bottom"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::margin_left"]
type = "F32"
name = "Margin left"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::margin_right"]
type = "F32"
name = "Margin right"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::margin_top"]
type = "F32"
name = "Margin top"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::mesh_to_local_from_size"]
type = "Empty"
name = "Mest to local from size"
description = "Update the mesh_to_local based on the width and height of this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::min_height"]
type = "F32"
name = "Minimum height"
description = "The minimum height of a UI element."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::min_width"]
type = "F32"
name = "Minimum width"
description = "The minimum width of a UI element."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::orientation_horizontal"]
type = "Empty"
name = "Orientation horizontal"
description = "Layout orientation."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::orientation_vertical"]
type = "Empty"
name = "Orientation vertical"
description = "Layout orientation."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::padding_bottom"]
type = "F32"
name = "Padding bottom"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::padding_left"]
type = "F32"
name = "Padding left"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::padding_right"]
type = "F32"
name = "Padding right"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::padding_top"]
type = "F32"
name = "Padding top"
description = "Layout component."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::rect"]
type = "Empty"
name = "Rect"
description = "Make this into a rectangle, with optionally rounded corners and borders."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::space_between_items"]
type = "F32"
name = "Space between items"
description = "Space between items in a layout."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::text"]
type = "String"
name = "Text"
description = "Create a text mesh on this entity."
attributes = ["Debuggable", "Networked", "Store"]

[components."core::ui::width"]
type = "F32"
name = "Width"
description = "The width of a UI element."
attributes = ["Debuggable", "Networked", "Store"]

[concepts.transformable]
name = "Transformable"
description = "Can be translated, rotated and scaled."

[concepts.transformable.components]
"core::transform::translation" = [0.0, 0.0, 0.0]
"core::transform::scale" = [1.0, 1.0, 1.0]
"core::transform::rotation" = [0.0, 0.0, 0.0, 1.0]

[concepts.sphere]
name = "Sphere"
description = "A primitive sphere."

[concepts.sphere.components]
"core::primitives::sphere" = {}
"core::primitives::sphere_radius" = 0.5
"core::primitives::sphere_sectors" = 36
"core::primitives::sphere_stacks" = 18

[concepts.camera]
name = "Camera"
description = "Base components for a camera. You will need other components to make a fully-functioning camera."
extends = ["transformable"]

[concepts.camera.components]
"core::camera::near" = 0.10000000149011612
"core::camera::projection" = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]
"core::camera::projection_view" = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]
"core::camera::active_camera" = 0.0
"core::transform::local_to_world" = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]
"core::transform::inv_local_to_world" = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

[concepts.perspective_common_camera]
name = "Perspective Common Camera"
description = "Base components for a perspective camera. Consider `perspective_camera` or `perspective_infinite_reverse_camera`."
extends = ["camera"]

[concepts.perspective_common_camera.components]
"core::camera::fovy" = 1.0
"core::camera::aspect_ratio" = 1.0

[concepts.perspective_camera]
name = "Perspective Camera"
description = "A perspective camera."
extends = ["perspective_common_camera"]

[concepts.perspective_camera.components]
"core::camera::perspective" = {}
"core::camera::far" = 1000.0

[concepts.perspective_infinite_reverse_camera]
name = "Perspective-Infinite-Reverse Camera"
description = "A perspective-infinite-reverse camera. This is recommended for most use-cases."
extends = ["perspective_common_camera"]

[concepts.perspective_infinite_reverse_camera.components]
"core::camera::perspective_infinite_reverse" = {}

[concepts.orthographic_camera]
name = "Orthographic Camera"
description = "An orthographic camera."
extends = ["camera"]

[concepts.orthographic_camera.components]
"core::camera::orthographic" = {}
"core::camera::orthographic_left" = -1.0
"core::camera::orthographic_right" = 1.0
"core::camera::orthographic_top" = 1.0
"core::camera::orthographic_bottom" = -1.0
"core::camera::near" = -1.0
"core::camera::far" = 1.0
