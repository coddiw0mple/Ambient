record entity-id {
    id0: u64,
    id1: u64,
}

record vec2 {
    x: float32,
    y: float32,
}

record vec3 {
    x: float32,
    y: float32,
    z: float32,
}

record vec4 {
    x: float32,
    y: float32,
    z: float32,
    w: float32,
}

record uvec2 {
    x: u32,
    y: u32,
}

record uvec3 {
    x: u32,
    y: u32,
    z: u32,
}

record uvec4 {
    x: u32,
    y: u32,
    z: u32,
    w: u32,
}

record quat {
    x: float32,
    y: float32,
    z: float32,
    w: float32,
}

record mat4 {
    x: vec4,
    y: vec4,
    z: vec4,
    w: vec4,
}

/// An action in an animation.
record animation-action {
    // we assume only URLs for now
    /// The animation clip URL to play.
    clip-url: string,
    // no time: we assume this is being played at the time of playback
    // will be relaxed later
    /// Whether or not this action should loop
    looping: bool,
    /// How strongly this action applies to the final blend [0-1]
    weight: float32,
}

/// Controls the animations for an entity.
record animation-controller {
    /// All of the actions that contribute to this animation.
    /// Will be blended together.
    actions: list<animation-action>,
    /// Whether or not the first action's pose should be used as a base pose.
    apply-base-pose: bool,
}

variant component-list-type {
    type-empty(list<tuple<>>),
    type-bool(list<bool>),
    type-entity-id(list<entity-id>),
    type-f32(list<float32>),
    type-f64(list<float64>),
    type-mat4(list<mat4>),
    type-i32(list<s32>),
    type-quat(list<quat>),
    type-string(list<string>),
    type-u32(list<u32>),
    type-u64(list<u64>),
    type-vec2(list<vec2>),
    type-vec3(list<vec3>),
    type-vec4(list<vec4>),
    type-uvec2(list<uvec2>),
    type-uvec3(list<uvec3>),
    type-uvec4(list<uvec4>),
}

variant component-option-type {
    type-empty(option<tuple<>>),
    type-bool(option<bool>),
    type-entity-id(option<entity-id>),
    type-f32(option<float32>),
    type-f64(option<float64>),
    type-mat4(option<mat4>),
    type-i32(option<s32>),
    type-quat(option<quat>),
    type-string(option<string>),
    type-u32(option<u32>),
    type-u64(option<u64>),
    type-vec2(option<vec2>),
    type-vec3(option<vec3>),
    type-vec4(option<vec4>),
    type-uvec2(option<uvec2>),
    type-uvec3(option<uvec3>),
    type-uvec4(option<uvec4>),
}

variant component-type {
    type-empty(tuple<>),
    type-bool(bool),
    type-entity-id(entity-id),
    type-f32(float32),
    type-f64(float64),
    type-mat4(mat4),
    type-i32(s32),
    type-quat(quat),
    type-string(string),
    type-u32(u32),
    type-u64(u64),
    type-vec2(vec2),
    type-vec3(vec3),
    type-vec4(vec4),
    type-uvec2(uvec2),
    type-uvec3(uvec3),
    type-uvec4(uvec4),
    type-list(component-list-type),
    type-option(component-option-type),
}

component-get-index: func(id: string) -> option<u32>
type entity = list<tuple<u32, component-type>>

enum virtual-key-code {
    /// The '1' key over the letters.
    key1,
    /// The '2' key over the letters.
    key2,
    /// The '3' key over the letters.
    key3,
    /// The '4' key over the letters.
    key4,
    /// The '5' key over the letters.
    key5,
    /// The '6' key over the letters.
    key6,
    /// The '7' key over the letters.
    key7,
    /// The '8' key over the letters.
    key8,
    /// The '9' key over the letters.
    key9,
    /// The '0' key over the 'O' and 'P' keys.
    key0,

    a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    i,
    j,
    k,
    l,
    m,
    n,
    o,
    p,
    q,
    r,
    s,
    t,
    u,
    v,
    w,
    x,
    y,
    z,

    /// The Escape key, next to F1.
    escape,

    f1,
    f2,
    f3,
    f4,
    f5,
    f6,
    f7,
    f8,
    f9,
    f10,
    f11,
    f12,
    f13,
    f14,
    f15,
    f16,
    f17,
    f18,
    f19,
    f20,
    f21,
    f22,
    f23,
    f24,

    /// Print Screen/SysRq.
    snapshot,
    /// Scroll Lock.
    scroll,
    /// Pause/Break key, next to Scroll lock.
    pause,

    /// `Insert`, next to Backspace.
    insert,
    home,
    delete,
    end,
    page-down,
    page-up,

    left,
    up,
    right,
    down,

    /// The Backspace key, right over Enter.
    // TODO: rename
    back,
    /// The Enter key.
    return,
    /// The space bar.
    space,

    /// The "Compose" key on Linux.
    compose,

    caret,

    numlock,
    numpad0,
    numpad1,
    numpad2,
    numpad3,
    numpad4,
    numpad5,
    numpad6,
    numpad7,
    numpad8,
    numpad9,
    numpad-add,
    numpad-divide,
    numpad-decimal,
    numpad-comma,
    numpad-enter,
    numpad-equals,
    numpad-multiply,
    numpad-subtract,

    abnt-c1,
    abnt-c2,
    apostrophe,
    apps,
    asterisk,
    at,
    ax,
    backslash,
    calculator,
    capital,
    colon,
    comma,
    convert,
    equals,
    grave,
    kana,
    kanji,
    l-alt,
    l-bracket,
    l-control,
    l-shift,
    l-win,
    mail,
    media-select,
    media-stop,
    minus,
    mute,
    my-computer,
    // also called "Next"
    navigate-forward,
    // also called "Prior"
    navigate-backward,
    next-track,
    no-convert,
    oem102,
    period,
    play-pause,
    plus,
    power,
    prev-track,
    r-alt,
    r-bracket,
    r-control,
    r-shift,
    r-win,
    semicolon,
    slash,
    sleep,
    stop,
    sysrq,
    tab,
    underline,
    unlabeled,
    volume-down,
    volume-up,
    wake,
    web-back,
    web-favorites,
    web-forward,
    web-home,
    web-refresh,
    web-search,
    web-stop,
    yen,
    copy,
    paste,
    cut,
}

variant mouse-button {
    left,
    right,
    middle,
    other(u16),
}

record player-raw-input {
    keys: list<virtual-key-code>,
    mouse-position: vec2,
    mouse-wheel: float32,
    mouse-buttons: list<mouse-button>,
}

// entity
entity-spawn: func(data: entity) -> entity-id
entity-despawn: func(entity: entity-id) -> bool
entity-set-animation-controller: func(entity: entity-id, animation-controller: animation-controller)
entity-in-area: func(position: vec3, radius: float32) -> list<entity-id>

entity-get-component: func(entity: entity-id, index: u32) -> option<component-type>

entity-add-component: func(entity: entity-id, index: u32, value: component-type)
entity-add-components: func(entity: entity-id, data: entity)

entity-set-component: func(entity: entity-id, index: u32, value: component-type)
entity-set-components: func(entity: entity-id, data: entity)

entity-has-component: func(entity: entity-id, index: u32) -> bool
entity-has-components: func(entity: entity-id, indices: list<u32>) -> bool

entity-remove-component: func(entity: entity-id, index: u32)
entity-remove-components: func(entity: entity-id, indices: list<u32>)

entity-exists: func(entity: entity-id) -> bool
entity-get-all: func(index: u32) -> list<entity-id>
entity-resources: func() -> entity-id

record query {
    components: list<u32>,
    include: list<u32>,
    exclude: list<u32>,
    changed: list<u32>,
}

enum query-event {
    frame,
    spawn,
    despawn
}

entity-query: func(q: query, t: query-event) -> u64
query-eval: func(q: u64) -> list<tuple<entity-id, list<component-type>>>

// player
player-get-raw-input: func(player: entity-id) -> option<player-raw-input>
player-get-prev-raw-input: func(player: entity-id) -> option<player-raw-input>

// physics
physics-apply-force: func(entities: list<entity-id>, force: vec3)
physics-explode-bomb: func(position: vec3, force: float32, radius: float32, falloff-radius: option<float32>)
physics-set-gravity: func(gravity: vec3)
physics-unfreeze: func(entity: entity-id)
physics-freeze: func(entity: entity-id)
physics-start-motor: func(entity: entity-id, velocity: float32)
physics-stop-motor: func(entity: entity-id)
physics-raycast-first: func(origin: vec3, direction: vec3) -> option<tuple<entity-id, float32>>
physics-raycast: func(origin: vec3, direction: vec3) -> list<tuple<entity-id, float32>>
record physics-character-collision {
    side: bool,
    up: bool,
    down: bool,
}
physics-move-character: func(entity: entity-id, displacement: vec3, min-dist: float32, elapsed-time: float32) -> physics-character-collision

// event
event-subscribe: func(name: string)
event-send: func(name: string, data: entity)

// asset
asset-url: func(path: string) -> option<string>
